import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, BufferedInputFile
import gspread
from google.oauth2.service_account import Credentials

# =====================================================
# –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê
# =====================================================

try:
    from config import *
except ImportError:
    # –ï—Å–ª–∏ config.py –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"
    ADMIN_CHANNEL_ID = "YOUR_ADMIN_CHANNEL_ID"
    GOOGLE_CREDENTIALS_PATH = "google_credentials.json"
    GOOGLE_SHEET_ID = "YOUR_GOOGLE_SHEET_ID"
    DEFAULT_ADMINS = [7533811917]  # –ê–¥–º–∏–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    CONGRATULATIONS_IMAGE_PATH = "congratulations_image.png"

# =====================================================
# –°–û–°–¢–û–Ø–ù–ò–Ø FSM
# =====================================================

class RegistrationForm(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()

# =====================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê
# =====================================================

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# =====================================================
# –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° GOOGLE –¢–ê–ë–õ–ò–¶–ê–ú–ò
# =====================================================

def init_google_sheets():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google –¢–∞–±–ª–∏—Ü–∞–º"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞
        scopes = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive"
        ]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        credentials = Credentials.from_service_account_file(
            GOOGLE_CREDENTIALS_PATH, scopes=scopes
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = gspread.authorize(credentials)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        sheet = client.open_by_key(GOOGLE_SHEET_ID).sheet1
        
        return sheet
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
        return None

def get_spreadsheet_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü–µ –∏ –≤—Å–µ—Ö –ª–∏—Å—Ç–∞—Ö"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞
        scopes = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive"
        ]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        credentials = Credentials.from_service_account_file(
            GOOGLE_CREDENTIALS_PATH, scopes=scopes
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = gspread.authorize(credentials)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        spreadsheet = client.open_by_key(GOOGLE_SHEET_ID)
        
        info = {
            'title': spreadsheet.title,
            'id': spreadsheet.id,
            'url': spreadsheet.url,
            'sheets': []
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ª–∏—Å—Ç–∞—Ö
        for sheet in spreadsheet.worksheets():
            sheet_info = {
                'title': sheet.title,
                'id': sheet.id,
                'rows': sheet.row_count,
                'cols': sheet.col_count,
                'is_active': sheet == spreadsheet.sheet1
            }
            info['sheets'].append(sheet_info)
        
        return info
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ: {e}")
        return None

def setup_google_sheet_headers():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ Google –¢–∞–±–ª–∏—Ü–µ (–º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)"""
    try:
        sheet = init_google_sheets()
        if not sheet:
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Å—Ç–µ
        print(f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞: '{sheet.title}'")
        print(f"üìä ID –ª–∏—Å—Ç–∞: {sheet.id}")
        print(f"üìè –†–∞–∑–º–µ—Ä –ª–∏—Å—Ç–∞: {sheet.row_count} —Å—Ç—Ä–æ–∫ x {sheet.col_count} —Å—Ç–æ–ª–±—Ü–æ–≤")
        
        all_values = sheet.get_all_values()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        headers = ['–ò–º—è', '–¢–µ–ª–µ—Ñ–æ–Ω', 'Username', 'User ID', '–î–∞—Ç–∞']
        
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤...")
        print(f"üìù –û–∂–∏–¥–∞–µ–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")
        
        if not all_values:
            print("üìÑ –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è")
            print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤...")
            sheet.append_row(headers)
        else:
            print(f"üìã –¢–µ–∫—É—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: {all_values[0]}")
            
            if all_values[0] != headers:
                print("‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–º")
                print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤...")
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –Ω–æ –Ω–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ - –≤—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö –≤ –Ω–∞—á–∞–ª–æ
                if all_values:
                    sheet.insert_row(headers, 1)
                    print("‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É")
                else:
                    sheet.append_row(headers)
                    print("‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø—É—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É")
            else:
                print("‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        try:
            sheet.format('A1:E1', {
                "textFormat": {"bold": True},
                "backgroundColor": {"red": 0.9, "green": 0.9, "blue": 0.9},
                "horizontalAlignment": "CENTER"
            })
            print("üé® –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as format_error:
            print(f"‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å–æ–∑–¥–∞–Ω—ã, –Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {format_error}")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {e}")
        return False

async def save_to_google_sheets(name: str, phone: str, username: str, user_id: int):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google –¢–∞–±–ª–∏—Ü—ã"""
    try:
        sheet = init_google_sheets()
        if sheet:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —Å–æ–∑–¥–∞–µ–º –∏—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            all_values = sheet.get_all_values()
            
            # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è –∏–ª–∏ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if not all_values or (all_values and all_values[0] != ['–ò–º—è', '–¢–µ–ª–µ—Ñ–æ–Ω', 'Username', 'User ID', '–î–∞—Ç–∞']):
                logging.info("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ Google –¢–∞–±–ª–∏—Ü–µ...")
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –Ω–æ –Ω–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ - –≤—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö –≤ –Ω–∞—á–∞–ª–æ
                if all_values:
                    sheet.insert_row(['–ò–º—è', '–¢–µ–ª–µ—Ñ–æ–Ω', 'Username', 'User ID', '–î–∞—Ç–∞'], 1)
                else:
                    # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è - –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    sheet.append_row(['–ò–º—è', '–¢–µ–ª–µ—Ñ–æ–Ω', 'Username', 'User ID', '–î–∞—Ç–∞'])
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–¥–µ–ª–∞–µ–º –∂–∏—Ä–Ω—ã–º–∏)
                try:
                    sheet.format('A1:E1', {
                        "textFormat": {
                            "bold": True
                        },
                        "backgroundColor": {
                            "red": 0.9,
                            "green": 0.9,
                            "blue": 0.9
                        }
                    })
                except Exception as format_error:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏: {format_error}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏
            from datetime import datetime
            current_date = datetime.now().strftime("%d.%m.%Y %H:%M")
            sheet.append_row([name, phone, username or "–ù–µ —É–∫–∞–∑–∞–Ω", user_id, current_date])
            
            logging.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—ã: {name}, {phone}")
            return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets: {e}")
        return False

# =====================================================
# –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ê–î–ú–ò–ù–ê–ú–ò
# =====================================================

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in DEFAULT_ADMINS

async def notify_admins(text: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤"""
    for admin_id in DEFAULT_ADMINS:
        try:
            await bot.send_message(chat_id=admin_id, text=text, parse_mode="HTML")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

# =====================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –°–û–û–ë–©–ï–ù–ò–ô
# =====================================================

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
welcomed_users = set()

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    
    welcome_text = (
        """üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>

–î–ª—è —É—á–∞—Å—Ç–∏—è <b>–≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ Levi's</b> –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∑–Ω–∞—Ç—å –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.

üìù <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:</b>"""
    )
    
    await message.answer(welcome_text, parse_mode="HTML")
    await state.set_state(RegistrationForm.waiting_for_name)

@dp.message(StateFilter(RegistrationForm.waiting_for_name))
async def process_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    name = message.text.strip()
    
    if len(name) < 2:
        await message.answer(
            """‚ùå <b>–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ.</b>

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:""",
            parse_mode="HTML"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(name=name)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    contact_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        f"‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ, {name}!</b>\n\n"
        "üìû <b>–¢–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–µ–Ω –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.</b>\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é:",
        reply_markup=contact_keyboard,
        parse_mode="HTML"
    )
    
    await state.set_state(RegistrationForm.waiting_for_phone)

@dp.message(StateFilter(RegistrationForm.waiting_for_phone), F.contact)
async def process_contact(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    phone = message.contact.phone_number
    await process_phone_data(message, state, phone)

@dp.message(StateFilter(RegistrationForm.waiting_for_phone), F.text)
async def process_phone_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    import re
    phone_pattern = r'^[\+]?[0-9\s\-\(\)]{10,15}$'
    
    if not re.match(phone_pattern, phone):
        await message.answer(
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.</b>\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ +7 (xxx) xxx-xx-xx\n"
            "‚Ä¢ 8xxxxxxxxxx\n"
            "‚Ä¢ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –≤—ã—à–µ",
            parse_mode="HTML"
        )
        return
    
    await process_phone_data(message, state, phone)

async def process_phone_data(message: types.Message, state: FSMContext, phone: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    name = data.get('name')
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer(
        "‚è≥ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ...</b>",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="HTML"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª –∞–¥–º–∏–Ω–æ–≤
    await send_to_admin_channel(message.from_user, name, phone)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google –¢–∞–±–ª–∏—Ü—ã
    await save_to_google_sheets(
        name=name,
        phone=phone,
        username=message.from_user.username,
        user_id=message.from_user.id
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    await send_congratulations(message, name)

async def send_to_admin_channel(user: types.User, name: str, phone: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª –∞–¥–º–∏–Ω–æ–≤"""
    try:
        admin_message = (
            "üÜï <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê</b>\n\n"
            f"üë§ <b>–ò–º—è:</b> {name}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
            f"üÜî <b>User ID:</b> <code>{user.id}</code>\n"
            f"üì± <b>Username:</b> @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞:</b> <a href='tg://user?id={user.id}'>–ü—Ä–æ—Ñ–∏–ª—å</a>\n\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {__import__('datetime').datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        await bot.send_message(
            chat_id=ADMIN_CHANNEL_ID,
            text=admin_message,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        
        logging.info(f"–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª: {name}, {phone}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª: {e}")

async def send_congratulations(message: types.Message, name: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    try:
        congratulations_text = (
            f"""üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {name}!</b>

–í—ã —Å—Ç–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ Levi's. –¢–µ–ø–µ—Ä—å –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–∫–∏–¥–∫–∏ –∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –∫–∞–∫ –¥–µ—Ä–∂–∞—Ç–µ–ª—é –∫–∞—Ä—Ç—ã. 

üõçÔ∏è <b>–ñ–¥—ë–º –≤–∞—Å –∑–∞ –ø–æ–∫—É–ø–∫–∞–º–∏!</b>
üìç <b>–¢–†–¶ –ó–û–õ–û–¢–û–ô –í–ê–í–ò–õ–û–ù 1 —ç—Ç–∞–∂</b>"""
        )
        
        # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        image_path = "image.png"
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é
            with open(image_path, 'rb') as file:
                photo = BufferedInputFile(file.read(), filename="congratulations.jpg")
                await message.answer_photo(
                    photo=photo,
                    caption=congratulations_text,
                    parse_mode="HTML"
                )
        except FileNotFoundError:
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await message.answer(
                congratulations_text,
                parse_mode="HTML"
            )
            logging.warning("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        await message.answer(
            "‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!",
            parse_mode="HTML"
        )

# =====================================================
# –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ê–î–ú–ò–ù–û–í
# =====================================================

@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</b>", parse_mode="HTML")
        return
    
    admin_text = (
        "üë®‚Äçüíº <b>–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨</b>\n\n"
        "üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫\n"
        "‚Ä¢ /setup_sheet - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google –¢–∞–±–ª–∏—Ü—ã\n"
        "‚Ä¢ /table_info - –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ\n"
        "‚Ä¢ /broadcast - –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n"
        f"üÜî <b>–í–∞—à ID:</b> <code>{message.from_user.id}</code>\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {__import__('datetime').datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    await message.answer(admin_text, parse_mode="HTML")

@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</b>", parse_mode="HTML")
        return
    
    try:
        sheet = init_google_sheets()
        if sheet:
            total_records = len(sheet.get_all_records())
            today = __import__('datetime').datetime.now().strftime('%d.%m.%Y')
            
            # –ü–æ–¥—Å—á–µ—Ç –∑–∞—è–≤–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
            today_count = 0
            try:
                all_data = sheet.get_all_values()
                for row in all_data[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    if len(row) >= 5 and today in row[4]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É
                        today_count += 1
            except:
                today_count = "–Ω/–¥"
            
            stats_text = (
                "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–Ø–í–û–ö</b>\n\n"
                f"üìà <b>–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫:</b> {total_records}\n"
                f"üìÖ <b>–ó–∞ —Å–µ–≥–æ–¥–Ω—è:</b> {today_count}\n"
                f"üïê <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {__import__('datetime').datetime.now().strftime('%H:%M')}"
            )
        else:
            stats_text = "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google –¢–∞–±–ª–∏—Ü–∞–º</b>"
            
    except Exception as e:
        stats_text = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b> {str(e)}"
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    await message.answer(stats_text, parse_mode="HTML")

@dp.message(Command("setup_sheet"))
async def cmd_setup_sheet(message: types.Message):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ Google –¢–∞–±–ª–∏—Ü–µ"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</b>", parse_mode="HTML")
        return
    
    await message.answer("üîß <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Google –¢–∞–±–ª–∏—Ü—ã...</b>", parse_mode="HTML")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
        sheet = init_google_sheets()
        if not sheet:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google –¢–∞–±–ª–∏—Ü–µ</b>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                "‚Ä¢ –§–∞–π–ª google_credentials.json\n"
                "‚Ä¢ ID —Ç–∞–±–ª–∏—Ü—ã –≤ config.py\n"
                "‚Ä¢ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ Service Account",
                parse_mode="HTML"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Å—Ç–µ
        sheet_info = (
            f"üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—Å—Ç–µ:</b>\n"
            f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{sheet.title}</code>\n"
            f"‚Ä¢ ID: <code>{sheet.id}</code>\n"
            f"‚Ä¢ –†–∞–∑–º–µ—Ä: {sheet.row_count} —Å—Ç—Ä–æ–∫ x {sheet.col_count} —Å—Ç–æ–ª–±—Ü–æ–≤\n\n"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        all_values = sheet.get_all_values()
        headers = ['–ò–º—è', '–¢–µ–ª–µ—Ñ–æ–Ω', 'Username', 'User ID', '–î–∞—Ç–∞']
        
        if not all_values:
            headers_info = "üìÑ <b>–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è</b> - –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã"
        else:
            current_headers = all_values[0]
            if current_headers == headers:
                headers_info = "‚úÖ <b>–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã:</b>\n" + "\n".join([f"‚Ä¢ {h}" for h in current_headers])
            else:
                headers_info = (
                    f"‚ö†Ô∏è <b>–ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç:</b>\n"
                    f"–¢–µ–∫—É—â–∏–µ: <code>{current_headers}</code>\n"
                    f"–û–∂–∏–¥–∞–µ–º—ã–µ: <code>{headers}</code>\n\n"
                    f"–ë—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏"
                )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if setup_google_sheet_headers():
            await message.answer(
                f"{sheet_info}"
                f"{headers_info}\n\n"
                f"‚úÖ <b>Google –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!</b>",
                parse_mode="HTML"
            )
        else:
            await message.answer(
                f"{sheet_info}"
                f"‚ùå <b>–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤</b>",
                parse_mode="HTML"
            )
            
    except Exception as e:
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {str(e)}", parse_mode="HTML")
        logging.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")

@dp.message(Command("table_info"))
async def cmd_table_info(message: types.Message):
    """–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Google –¢–∞–±–ª–∏—Ü–µ"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</b>", parse_mode="HTML")
        return
    
    await message.answer("üìä <b>–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Google –¢–∞–±–ª–∏—Ü–µ...</b>", parse_mode="HTML")
    
    try:
        info = get_spreadsheet_info()
        if not info:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ</b>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                parse_mode="HTML"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
        table_info = (
            f"üìä <b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–ê–ë–õ–ò–¶–ï</b>\n\n"
            f"üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {info['title']}\n"
            f"üÜî <b>ID:</b> <code>{info['id']}</code>\n"
            f"üîó <b>URL:</b> <a href='{info['url']}'>–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É</a>\n\n"
            f"üìÑ <b>–õ–∏—Å—Ç—ã ({len(info['sheets'])}):</b>\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –ª–∏—Å—Ç–µ
        for i, sheet in enumerate(info['sheets'], 1):
            status = "üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π" if sheet['is_active'] else "‚ö™ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π"
            table_info += (
                f"{i}. <b>{sheet['title']}</b> {status}\n"
                f"   ‚Ä¢ ID: <code>{sheet['id']}</code>\n"
                f"   ‚Ä¢ –†–∞–∑–º–µ—Ä: {sheet['rows']} x {sheet['cols']}\n\n"
            )
        
        await message.answer(table_info, parse_mode="HTML", disable_web_page_preview=True)
        
    except Exception as e:
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {str(e)}", parse_mode="HTML")
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ: {e}")

# =====================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–ï–ò–ó–í–ï–°–¢–ù–´–• –ö–û–ú–ê–ù–î
# =====================================================

@dp.message()
async def unknown_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –≤–ø–µ—Ä–≤—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_id not in welcomed_users:
        welcomed_users.add(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –°–¢–ê–†–¢
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
        start_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–°–¢–ê–†–¢", callback_data="start_registration")]
            ]
        )
        
        welcome_text = (
            """–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç —Ñ–∏—Ä–º–µ–Ω–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ Levi's ‚ù§Ô∏è

–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–°–¢–ê–†–¢¬ª

–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ¬´–°–¢–ê–†–¢¬ª —Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å, —á—Ç–æ –¥–∞–µ—à—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (http://tula.leviru.com/agreement)."""
        )
        
        await message.answer(welcome_text, reply_markup=start_keyboard)
    else:
        await message.answer(
            "‚ùì <b>–ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            parse_mode="HTML"
        )

@dp.callback_query(F.data == "start_registration")
async def callback_start_registration(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –°–¢–ê–†–¢"""
    await callback.answer()
    await state.clear()
    
    welcome_text = (
        """üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>

–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ Levi's –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∑–Ω–∞—Ç—å –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.

üìù <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:</b>"""
    )
    
    await callback.message.edit_text(welcome_text, parse_mode="HTML")
    await state.set_state(RegistrationForm.waiting_for_name)

# =====================================================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# =====================================================

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –µ—Å—Ç—å
    await bot.delete_webhook(drop_pending_updates=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

if __name__ == "__main__":
    asyncio.run(main())
